// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/cloud/bigquery/storage/v1/storage.proto

#include "google/cloud/bigquery/storage/v1/storage.pb.h"
#include "google/cloud/bigquery/storage/v1/storage.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace cloud {
namespace bigquery {
namespace storage {
namespace v1 {

static const char* BigQueryRead_method_names[] = {
  "/google.cloud.bigquery.storage.v1.BigQueryRead/CreateReadSession",
  "/google.cloud.bigquery.storage.v1.BigQueryRead/ReadRows",
  "/google.cloud.bigquery.storage.v1.BigQueryRead/SplitReadStream",
};

std::unique_ptr< BigQueryRead::Stub> BigQueryRead::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BigQueryRead::Stub> stub(new BigQueryRead::Stub(channel));
  return stub;
}

BigQueryRead::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateReadSession_(BigQueryRead_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadRows_(BigQueryRead_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SplitReadStream_(BigQueryRead_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BigQueryRead::Stub::CreateReadSession(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest& request, ::google::cloud::bigquery::storage::v1::ReadSession* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateReadSession_, context, request, response);
}

void BigQueryRead::Stub::experimental_async::CreateReadSession(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest* request, ::google::cloud::bigquery::storage::v1::ReadSession* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateReadSession_, context, request, response, std::move(f));
}

void BigQueryRead::Stub::experimental_async::CreateReadSession(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest* request, ::google::cloud::bigquery::storage::v1::ReadSession* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateReadSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::storage::v1::ReadSession>* BigQueryRead::Stub::PrepareAsyncCreateReadSessionRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::bigquery::storage::v1::ReadSession>::Create(channel_.get(), cq, rpcmethod_CreateReadSession_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::storage::v1::ReadSession>* BigQueryRead::Stub::AsyncCreateReadSessionRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateReadSessionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>* BigQueryRead::Stub::ReadRowsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::ReadRowsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>::Create(channel_.get(), rpcmethod_ReadRows_, context, request);
}

void BigQueryRead::Stub::experimental_async::ReadRows(::grpc::ClientContext* context, ::google::cloud::bigquery::storage::v1::ReadRowsRequest* request, ::grpc::experimental::ClientReadReactor< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ReadRows_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>* BigQueryRead::Stub::AsyncReadRowsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::ReadRowsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>::Create(channel_.get(), cq, rpcmethod_ReadRows_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>* BigQueryRead::Stub::PrepareAsyncReadRowsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::ReadRowsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>::Create(channel_.get(), cq, rpcmethod_ReadRows_, context, request, false, nullptr);
}

::grpc::Status BigQueryRead::Stub::SplitReadStream(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest& request, ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SplitReadStream_, context, request, response);
}

void BigQueryRead::Stub::experimental_async::SplitReadStream(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest* request, ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SplitReadStream_, context, request, response, std::move(f));
}

void BigQueryRead::Stub::experimental_async::SplitReadStream(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest* request, ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SplitReadStream_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse>* BigQueryRead::Stub::PrepareAsyncSplitReadStreamRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse>::Create(channel_.get(), cq, rpcmethod_SplitReadStream_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse>* BigQueryRead::Stub::AsyncSplitReadStreamRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSplitReadStreamRaw(context, request, cq);
  result->StartCall();
  return result;
}

BigQueryRead::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BigQueryRead_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BigQueryRead::Service, ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest, ::google::cloud::bigquery::storage::v1::ReadSession>(
          [](BigQueryRead::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest* req,
             ::google::cloud::bigquery::storage::v1::ReadSession* resp) {
               return service->CreateReadSession(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BigQueryRead_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< BigQueryRead::Service, ::google::cloud::bigquery::storage::v1::ReadRowsRequest, ::google::cloud::bigquery::storage::v1::ReadRowsResponse>(
          [](BigQueryRead::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::cloud::bigquery::storage::v1::ReadRowsRequest* req,
             ::grpc::ServerWriter<::google::cloud::bigquery::storage::v1::ReadRowsResponse>* writer) {
               return service->ReadRows(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BigQueryRead_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BigQueryRead::Service, ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest, ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse>(
          [](BigQueryRead::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest* req,
             ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse* resp) {
               return service->SplitReadStream(ctx, req, resp);
             }, this)));
}

BigQueryRead::Service::~Service() {
}

::grpc::Status BigQueryRead::Service::CreateReadSession(::grpc::ServerContext* context, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest* request, ::google::cloud::bigquery::storage::v1::ReadSession* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BigQueryRead::Service::ReadRows(::grpc::ServerContext* context, const ::google::cloud::bigquery::storage::v1::ReadRowsRequest* request, ::grpc::ServerWriter< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BigQueryRead::Service::SplitReadStream(::grpc::ServerContext* context, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest* request, ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace cloud
}  // namespace bigquery
}  // namespace storage
}  // namespace v1

