// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/storage/v1/storage.proto

#include "google/cloud/bigquery/storage/v1/storage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fstorage_2fv1_2farrow_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArrowRecordBatch_google_2fcloud_2fbigquery_2fstorage_2fv1_2farrow_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fstorage_2fv1_2favro_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvroRows_google_2fcloud_2fbigquery_2fstorage_2fv1_2favro_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ReadSession_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadStream_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StreamStats_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamStats_Progress_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThrottleState_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
namespace google {
namespace cloud {
namespace bigquery {
namespace storage {
namespace v1 {
class CreateReadSessionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateReadSessionRequest> _instance;
} _CreateReadSessionRequest_default_instance_;
class ReadRowsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadRowsRequest> _instance;
} _ReadRowsRequest_default_instance_;
class ThrottleStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThrottleState> _instance;
} _ThrottleState_default_instance_;
class StreamStats_ProgressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamStats_Progress> _instance;
} _StreamStats_Progress_default_instance_;
class StreamStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamStats> _instance;
} _StreamStats_default_instance_;
class ReadRowsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadRowsResponse> _instance;
  const ::google::cloud::bigquery::storage::v1::AvroRows* avro_rows_;
  const ::google::cloud::bigquery::storage::v1::ArrowRecordBatch* arrow_record_batch_;
} _ReadRowsResponse_default_instance_;
class SplitReadStreamRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SplitReadStreamRequest> _instance;
} _SplitReadStreamRequest_default_instance_;
class SplitReadStreamResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SplitReadStreamResponse> _instance;
} _SplitReadStreamResponse_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace bigquery
}  // namespace cloud
}  // namespace google
static void InitDefaultsscc_info_CreateReadSessionRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::storage::v1::_CreateReadSessionRequest_default_instance_;
    new (ptr) ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateReadSessionRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateReadSessionRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto}, {
      &scc_info_ReadSession_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstream_2eproto.base,}};

static void InitDefaultsscc_info_ReadRowsRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::storage::v1::_ReadRowsRequest_default_instance_;
    new (ptr) ::google::cloud::bigquery::storage::v1::ReadRowsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::storage::v1::ReadRowsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadRowsRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadRowsRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto}, {}};

static void InitDefaultsscc_info_ReadRowsResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::storage::v1::_ReadRowsResponse_default_instance_;
    new (ptr) ::google::cloud::bigquery::storage::v1::ReadRowsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::storage::v1::ReadRowsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ReadRowsResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ReadRowsResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto}, {
      &scc_info_AvroRows_google_2fcloud_2fbigquery_2fstorage_2fv1_2favro_2eproto.base,
      &scc_info_ArrowRecordBatch_google_2fcloud_2fbigquery_2fstorage_2fv1_2farrow_2eproto.base,
      &scc_info_StreamStats_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
      &scc_info_ThrottleState_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,}};

static void InitDefaultsscc_info_SplitReadStreamRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::storage::v1::_SplitReadStreamRequest_default_instance_;
    new (ptr) ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SplitReadStreamRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SplitReadStreamRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto}, {}};

static void InitDefaultsscc_info_SplitReadStreamResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::storage::v1::_SplitReadStreamResponse_default_instance_;
    new (ptr) ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SplitReadStreamResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SplitReadStreamResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto}, {
      &scc_info_ReadStream_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstream_2eproto.base,}};

static void InitDefaultsscc_info_StreamStats_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::storage::v1::_StreamStats_default_instance_;
    new (ptr) ::google::cloud::bigquery::storage::v1::StreamStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::storage::v1::StreamStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StreamStats_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StreamStats_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto}, {
      &scc_info_StreamStats_Progress_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,}};

static void InitDefaultsscc_info_StreamStats_Progress_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::storage::v1::_StreamStats_Progress_default_instance_;
    new (ptr) ::google::cloud::bigquery::storage::v1::StreamStats_Progress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::storage::v1::StreamStats_Progress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamStats_Progress_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StreamStats_Progress_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto}, {}};

static void InitDefaultsscc_info_ThrottleState_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::storage::v1::_ThrottleState_default_instance_;
    new (ptr) ::google::cloud::bigquery::storage::v1::ThrottleState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::storage::v1::ThrottleState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThrottleState_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ThrottleState_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::CreateReadSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::CreateReadSessionRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::CreateReadSessionRequest, read_session_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::CreateReadSessionRequest, max_stream_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::ReadRowsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::ReadRowsRequest, read_stream_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::ReadRowsRequest, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::ThrottleState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::ThrottleState, throttle_percent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::StreamStats_Progress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::StreamStats_Progress, at_response_start_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::StreamStats_Progress, at_response_end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::StreamStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::StreamStats, progress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::ReadRowsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::ReadRowsResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::cloud::bigquery::storage::v1::ReadRowsResponseDefaultTypeInternal, avro_rows_),
  offsetof(::google::cloud::bigquery::storage::v1::ReadRowsResponseDefaultTypeInternal, arrow_record_batch_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::ReadRowsResponse, row_count_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::ReadRowsResponse, stats_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::ReadRowsResponse, throttle_state_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::ReadRowsResponse, rows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::SplitReadStreamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::SplitReadStreamRequest, name_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::SplitReadStreamRequest, fraction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::SplitReadStreamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::SplitReadStreamResponse, primary_stream_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::SplitReadStreamResponse, remainder_stream_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::cloud::bigquery::storage::v1::CreateReadSessionRequest)},
  { 8, -1, sizeof(::google::cloud::bigquery::storage::v1::ReadRowsRequest)},
  { 15, -1, sizeof(::google::cloud::bigquery::storage::v1::ThrottleState)},
  { 21, -1, sizeof(::google::cloud::bigquery::storage::v1::StreamStats_Progress)},
  { 28, -1, sizeof(::google::cloud::bigquery::storage::v1::StreamStats)},
  { 34, -1, sizeof(::google::cloud::bigquery::storage::v1::ReadRowsResponse)},
  { 45, -1, sizeof(::google::cloud::bigquery::storage::v1::SplitReadStreamRequest)},
  { 52, -1, sizeof(::google::cloud::bigquery::storage::v1::SplitReadStreamResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::bigquery::storage::v1::_CreateReadSessionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::bigquery::storage::v1::_ReadRowsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::bigquery::storage::v1::_ThrottleState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::bigquery::storage::v1::_StreamStats_Progress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::bigquery::storage::v1::_StreamStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::bigquery::storage::v1::_ReadRowsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::bigquery::storage::v1::_SplitReadStreamRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::bigquery::storage::v1::_SplitReadStreamResponse_default_instance_),
};

const char descriptor_table_protodef_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.google/cloud/bigquery/storage/v1/stora"
  "ge.proto\022 google.cloud.bigquery.storage."
  "v1\032\034google/api/annotations.proto\032\027google"
  "/api/client.proto\032\037google/api/field_beha"
  "vior.proto\032\031google/api/resource.proto\032,g"
  "oogle/cloud/bigquery/storage/v1/arrow.pr"
  "oto\032+google/cloud/bigquery/storage/v1/av"
  "ro.proto\032-google/cloud/bigquery/storage/"
  "v1/stream.proto\"\303\001\n\030CreateReadSessionReq"
  "uest\022C\n\006parent\030\001 \001(\tB3\340A\002\372A-\n+cloudresou"
  "rcemanager.googleapis.com/Project\022H\n\014rea"
  "d_session\030\002 \001(\0132-.google.cloud.bigquery."
  "storage.v1.ReadSessionB\003\340A\002\022\030\n\020max_strea"
  "m_count\030\003 \001(\005\"i\n\017ReadRowsRequest\022F\n\013read"
  "_stream\030\001 \001(\tB1\340A\002\372A+\n)bigquerystorage.g"
  "oogleapis.com/ReadStream\022\016\n\006offset\030\002 \001(\003"
  "\")\n\rThrottleState\022\030\n\020throttle_percent\030\001 "
  "\001(\005\"\227\001\n\013StreamStats\022H\n\010progress\030\002 \001(\01326."
  "google.cloud.bigquery.storage.v1.StreamS"
  "tats.Progress\032>\n\010Progress\022\031\n\021at_response"
  "_start\030\001 \001(\001\022\027\n\017at_response_end\030\002 \001(\001\"\307\002"
  "\n\020ReadRowsResponse\022\?\n\tavro_rows\030\003 \001(\0132*."
  "google.cloud.bigquery.storage.v1.AvroRow"
  "sH\000\022P\n\022arrow_record_batch\030\004 \001(\01322.google"
  ".cloud.bigquery.storage.v1.ArrowRecordBa"
  "tchH\000\022\021\n\trow_count\030\006 \001(\003\022<\n\005stats\030\002 \001(\0132"
  "-.google.cloud.bigquery.storage.v1.Strea"
  "mStats\022G\n\016throttle_state\030\005 \001(\0132/.google."
  "cloud.bigquery.storage.v1.ThrottleStateB"
  "\006\n\004rows\"k\n\026SplitReadStreamRequest\022\?\n\004nam"
  "e\030\001 \001(\tB1\340A\002\372A+\n)bigquerystorage.googlea"
  "pis.com/ReadStream\022\020\n\010fraction\030\002 \001(\001\"\247\001\n"
  "\027SplitReadStreamResponse\022D\n\016primary_stre"
  "am\030\001 \001(\0132,.google.cloud.bigquery.storage"
  ".v1.ReadStream\022F\n\020remainder_stream\030\002 \001(\013"
  "2,.google.cloud.bigquery.storage.v1.Read"
  "Stream2\306\006\n\014BigQueryRead\022\351\001\n\021CreateReadSe"
  "ssion\022:.google.cloud.bigquery.storage.v1"
  ".CreateReadSessionRequest\032-.google.cloud"
  ".bigquery.storage.v1.ReadSession\"i\202\323\344\223\002<"
  "\"7/v1/{read_session.table=projects/*/dat"
  "asets/*/tables/*}:\001*\332A$parent,read_sessi"
  "on,max_stream_count\022\317\001\n\010ReadRows\0221.googl"
  "e.cloud.bigquery.storage.v1.ReadRowsRequ"
  "est\0322.google.cloud.bigquery.storage.v1.R"
  "eadRowsResponse\"Z\202\323\344\223\002\?\022=/v1/{read_strea"
  "m=projects/*/locations/*/sessions/*/stre"
  "ams/*}\332A\022read_stream,offset0\001\022\306\001\n\017SplitR"
  "eadStream\0228.google.cloud.bigquery.storag"
  "e.v1.SplitReadStreamRequest\0329.google.clo"
  "ud.bigquery.storage.v1.SplitReadStreamRe"
  "sponse\">\202\323\344\223\0028\0226/v1/{name=projects/*/loc"
  "ations/*/sessions/*/streams/*}\032\256\001\312A\036bigq"
  "uerystorage.googleapis.com\322A\211\001https://ww"
  "w.googleapis.com/auth/bigquery,https://w"
  "ww.googleapis.com/auth/bigquery.readonly"
  ",https://www.googleapis.com/auth/cloud-p"
  "latformB\235\002\n$com.google.cloud.bigquery.st"
  "orage.v1B\014StorageProtoP\001ZGgoogle.golang."
  "org/genproto/googleapis/cloud/bigquery/s"
  "torage/v1;storage\252\002 Google.Cloud.BigQuer"
  "y.Storage.V1\312\002 Google\\Cloud\\BigQuery\\Sto"
  "rage\\V1\352AU\n\035bigquery.googleapis.com/Tabl"
  "e\0224projects/{project}/datasets/{dataset}"
  "/tables/{table}b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto_deps[7] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fapi_2fresource_2eproto,
  &::descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2farrow_2eproto,
  &::descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2favro_2eproto,
  &::descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstream_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto_sccs[8] = {
  &scc_info_CreateReadSessionRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
  &scc_info_ReadRowsRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
  &scc_info_ReadRowsResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
  &scc_info_SplitReadStreamRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
  &scc_info_SplitReadStreamResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
  &scc_info_StreamStats_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
  &scc_info_StreamStats_Progress_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
  &scc_info_ThrottleState_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto = {
  false, false, descriptor_table_protodef_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto, "google/cloud/bigquery/storage/v1/storage.proto", 2583,
  &descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto_once, descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto_sccs, descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto_deps, 8, 7,
  schemas, file_default_instances, TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto::offsets,
  file_level_metadata_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto, 8, file_level_enum_descriptors_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto, file_level_service_descriptors_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto)), true);
namespace google {
namespace cloud {
namespace bigquery {
namespace storage {
namespace v1 {

// ===================================================================

void CreateReadSessionRequest::InitAsDefaultInstance() {
  ::google::cloud::bigquery::storage::v1::_CreateReadSessionRequest_default_instance_._instance.get_mutable()->read_session_ = const_cast< ::google::cloud::bigquery::storage::v1::ReadSession*>(
      ::google::cloud::bigquery::storage::v1::ReadSession::internal_default_instance());
}
class CreateReadSessionRequest::_Internal {
 public:
  static const ::google::cloud::bigquery::storage::v1::ReadSession& read_session(const CreateReadSessionRequest* msg);
};

const ::google::cloud::bigquery::storage::v1::ReadSession&
CreateReadSessionRequest::_Internal::read_session(const CreateReadSessionRequest* msg) {
  return *msg->read_session_;
}
void CreateReadSessionRequest::clear_read_session() {
  if (GetArena() == nullptr && read_session_ != nullptr) {
    delete read_session_;
  }
  read_session_ = nullptr;
}
CreateReadSessionRequest::CreateReadSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.bigquery.storage.v1.CreateReadSessionRequest)
}
CreateReadSessionRequest::CreateReadSessionRequest(const CreateReadSessionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parent().empty()) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_parent(),
      GetArena());
  }
  if (from._internal_has_read_session()) {
    read_session_ = new ::google::cloud::bigquery::storage::v1::ReadSession(*from.read_session_);
  } else {
    read_session_ = nullptr;
  }
  max_stream_count_ = from.max_stream_count_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.storage.v1.CreateReadSessionRequest)
}

void CreateReadSessionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateReadSessionRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&read_session_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_stream_count_) -
      reinterpret_cast<char*>(&read_session_)) + sizeof(max_stream_count_));
}

CreateReadSessionRequest::~CreateReadSessionRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.storage.v1.CreateReadSessionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateReadSessionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  parent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete read_session_;
}

void CreateReadSessionRequest::ArenaDtor(void* object) {
  CreateReadSessionRequest* _this = reinterpret_cast< CreateReadSessionRequest* >(object);
  (void)_this;
}
void CreateReadSessionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateReadSessionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateReadSessionRequest& CreateReadSessionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateReadSessionRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void CreateReadSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.storage.v1.CreateReadSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && read_session_ != nullptr) {
    delete read_session_;
  }
  read_session_ = nullptr;
  max_stream_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateReadSessionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_parent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.bigquery.storage.v1.CreateReadSessionRequest.parent"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.cloud.bigquery.storage.v1.ReadSession read_session = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_session(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_stream_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_stream_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateReadSessionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.storage.v1.CreateReadSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent().data(), static_cast<int>(this->_internal_parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.storage.v1.CreateReadSessionRequest.parent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parent(), target);
  }

  // .google.cloud.bigquery.storage.v1.ReadSession read_session = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_read_session()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::read_session(this), target, stream);
  }

  // int32 max_stream_count = 3;
  if (this->max_stream_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_stream_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.storage.v1.CreateReadSessionRequest)
  return target;
}

size_t CreateReadSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.storage.v1.CreateReadSessionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent());
  }

  // .google.cloud.bigquery.storage.v1.ReadSession read_session = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_read_session()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *read_session_);
  }

  // int32 max_stream_count = 3;
  if (this->max_stream_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_stream_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateReadSessionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.storage.v1.CreateReadSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateReadSessionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateReadSessionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.storage.v1.CreateReadSessionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.storage.v1.CreateReadSessionRequest)
    MergeFrom(*source);
  }
}

void CreateReadSessionRequest::MergeFrom(const CreateReadSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.storage.v1.CreateReadSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {
    _internal_set_parent(from._internal_parent());
  }
  if (from.has_read_session()) {
    _internal_mutable_read_session()->::google::cloud::bigquery::storage::v1::ReadSession::MergeFrom(from._internal_read_session());
  }
  if (from.max_stream_count() != 0) {
    _internal_set_max_stream_count(from._internal_max_stream_count());
  }
}

void CreateReadSessionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.storage.v1.CreateReadSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateReadSessionRequest::CopyFrom(const CreateReadSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.storage.v1.CreateReadSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateReadSessionRequest::IsInitialized() const {
  return true;
}

void CreateReadSessionRequest::InternalSwap(CreateReadSessionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  parent_.Swap(&other->parent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateReadSessionRequest, max_stream_count_)
      + sizeof(CreateReadSessionRequest::max_stream_count_)
      - PROTOBUF_FIELD_OFFSET(CreateReadSessionRequest, read_session_)>(
          reinterpret_cast<char*>(&read_session_),
          reinterpret_cast<char*>(&other->read_session_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateReadSessionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadRowsRequest::InitAsDefaultInstance() {
}
class ReadRowsRequest::_Internal {
 public:
};

ReadRowsRequest::ReadRowsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.bigquery.storage.v1.ReadRowsRequest)
}
ReadRowsRequest::ReadRowsRequest(const ReadRowsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  read_stream_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_read_stream().empty()) {
    read_stream_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_read_stream(),
      GetArena());
  }
  offset_ = from.offset_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.storage.v1.ReadRowsRequest)
}

void ReadRowsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadRowsRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  read_stream_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  offset_ = PROTOBUF_LONGLONG(0);
}

ReadRowsRequest::~ReadRowsRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.storage.v1.ReadRowsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadRowsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  read_stream_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadRowsRequest::ArenaDtor(void* object) {
  ReadRowsRequest* _this = reinterpret_cast< ReadRowsRequest* >(object);
  (void)_this;
}
void ReadRowsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadRowsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadRowsRequest& ReadRowsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadRowsRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void ReadRowsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.storage.v1.ReadRowsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  read_stream_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  offset_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRowsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string read_stream = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_read_stream();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.bigquery.storage.v1.ReadRowsRequest.read_stream"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadRowsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.storage.v1.ReadRowsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string read_stream = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->read_stream().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_read_stream().data(), static_cast<int>(this->_internal_read_stream().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.storage.v1.ReadRowsRequest.read_stream");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_read_stream(), target);
  }

  // int64 offset = 2;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.storage.v1.ReadRowsRequest)
  return target;
}

size_t ReadRowsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.storage.v1.ReadRowsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string read_stream = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->read_stream().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_read_stream());
  }

  // int64 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadRowsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.storage.v1.ReadRowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadRowsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadRowsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.storage.v1.ReadRowsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.storage.v1.ReadRowsRequest)
    MergeFrom(*source);
  }
}

void ReadRowsRequest::MergeFrom(const ReadRowsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.storage.v1.ReadRowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.read_stream().size() > 0) {
    _internal_set_read_stream(from._internal_read_stream());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void ReadRowsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.storage.v1.ReadRowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRowsRequest::CopyFrom(const ReadRowsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.storage.v1.ReadRowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRowsRequest::IsInitialized() const {
  return true;
}

void ReadRowsRequest::InternalSwap(ReadRowsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  read_stream_.Swap(&other->read_stream_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRowsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ThrottleState::InitAsDefaultInstance() {
}
class ThrottleState::_Internal {
 public:
};

ThrottleState::ThrottleState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.bigquery.storage.v1.ThrottleState)
}
ThrottleState::ThrottleState(const ThrottleState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  throttle_percent_ = from.throttle_percent_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.storage.v1.ThrottleState)
}

void ThrottleState::SharedCtor() {
  throttle_percent_ = 0;
}

ThrottleState::~ThrottleState() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.storage.v1.ThrottleState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ThrottleState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ThrottleState::ArenaDtor(void* object) {
  ThrottleState* _this = reinterpret_cast< ThrottleState* >(object);
  (void)_this;
}
void ThrottleState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThrottleState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThrottleState& ThrottleState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThrottleState_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void ThrottleState::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.storage.v1.ThrottleState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  throttle_percent_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThrottleState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 throttle_percent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          throttle_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThrottleState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.storage.v1.ThrottleState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 throttle_percent = 1;
  if (this->throttle_percent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_throttle_percent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.storage.v1.ThrottleState)
  return target;
}

size_t ThrottleState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.storage.v1.ThrottleState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 throttle_percent = 1;
  if (this->throttle_percent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_throttle_percent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThrottleState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.storage.v1.ThrottleState)
  GOOGLE_DCHECK_NE(&from, this);
  const ThrottleState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThrottleState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.storage.v1.ThrottleState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.storage.v1.ThrottleState)
    MergeFrom(*source);
  }
}

void ThrottleState::MergeFrom(const ThrottleState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.storage.v1.ThrottleState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.throttle_percent() != 0) {
    _internal_set_throttle_percent(from._internal_throttle_percent());
  }
}

void ThrottleState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.storage.v1.ThrottleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThrottleState::CopyFrom(const ThrottleState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.storage.v1.ThrottleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThrottleState::IsInitialized() const {
  return true;
}

void ThrottleState::InternalSwap(ThrottleState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(throttle_percent_, other->throttle_percent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThrottleState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamStats_Progress::InitAsDefaultInstance() {
}
class StreamStats_Progress::_Internal {
 public:
};

StreamStats_Progress::StreamStats_Progress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.bigquery.storage.v1.StreamStats.Progress)
}
StreamStats_Progress::StreamStats_Progress(const StreamStats_Progress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&at_response_start_, &from.at_response_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&at_response_end_) -
    reinterpret_cast<char*>(&at_response_start_)) + sizeof(at_response_end_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.storage.v1.StreamStats.Progress)
}

void StreamStats_Progress::SharedCtor() {
  ::memset(&at_response_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&at_response_end_) -
      reinterpret_cast<char*>(&at_response_start_)) + sizeof(at_response_end_));
}

StreamStats_Progress::~StreamStats_Progress() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.storage.v1.StreamStats.Progress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamStats_Progress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StreamStats_Progress::ArenaDtor(void* object) {
  StreamStats_Progress* _this = reinterpret_cast< StreamStats_Progress* >(object);
  (void)_this;
}
void StreamStats_Progress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamStats_Progress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamStats_Progress& StreamStats_Progress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamStats_Progress_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void StreamStats_Progress::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.storage.v1.StreamStats.Progress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&at_response_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&at_response_end_) -
      reinterpret_cast<char*>(&at_response_start_)) + sizeof(at_response_end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamStats_Progress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double at_response_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          at_response_start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double at_response_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          at_response_end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamStats_Progress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.storage.v1.StreamStats.Progress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double at_response_start = 1;
  if (!(this->at_response_start() <= 0 && this->at_response_start() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_at_response_start(), target);
  }

  // double at_response_end = 2;
  if (!(this->at_response_end() <= 0 && this->at_response_end() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_at_response_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.storage.v1.StreamStats.Progress)
  return target;
}

size_t StreamStats_Progress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.storage.v1.StreamStats.Progress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double at_response_start = 1;
  if (!(this->at_response_start() <= 0 && this->at_response_start() >= 0)) {
    total_size += 1 + 8;
  }

  // double at_response_end = 2;
  if (!(this->at_response_end() <= 0 && this->at_response_end() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamStats_Progress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.storage.v1.StreamStats.Progress)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamStats_Progress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamStats_Progress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.storage.v1.StreamStats.Progress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.storage.v1.StreamStats.Progress)
    MergeFrom(*source);
  }
}

void StreamStats_Progress::MergeFrom(const StreamStats_Progress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.storage.v1.StreamStats.Progress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.at_response_start() <= 0 && from.at_response_start() >= 0)) {
    _internal_set_at_response_start(from._internal_at_response_start());
  }
  if (!(from.at_response_end() <= 0 && from.at_response_end() >= 0)) {
    _internal_set_at_response_end(from._internal_at_response_end());
  }
}

void StreamStats_Progress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.storage.v1.StreamStats.Progress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamStats_Progress::CopyFrom(const StreamStats_Progress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.storage.v1.StreamStats.Progress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamStats_Progress::IsInitialized() const {
  return true;
}

void StreamStats_Progress::InternalSwap(StreamStats_Progress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamStats_Progress, at_response_end_)
      + sizeof(StreamStats_Progress::at_response_end_)
      - PROTOBUF_FIELD_OFFSET(StreamStats_Progress, at_response_start_)>(
          reinterpret_cast<char*>(&at_response_start_),
          reinterpret_cast<char*>(&other->at_response_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamStats_Progress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamStats::InitAsDefaultInstance() {
  ::google::cloud::bigquery::storage::v1::_StreamStats_default_instance_._instance.get_mutable()->progress_ = const_cast< ::google::cloud::bigquery::storage::v1::StreamStats_Progress*>(
      ::google::cloud::bigquery::storage::v1::StreamStats_Progress::internal_default_instance());
}
class StreamStats::_Internal {
 public:
  static const ::google::cloud::bigquery::storage::v1::StreamStats_Progress& progress(const StreamStats* msg);
};

const ::google::cloud::bigquery::storage::v1::StreamStats_Progress&
StreamStats::_Internal::progress(const StreamStats* msg) {
  return *msg->progress_;
}
StreamStats::StreamStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.bigquery.storage.v1.StreamStats)
}
StreamStats::StreamStats(const StreamStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_progress()) {
    progress_ = new ::google::cloud::bigquery::storage::v1::StreamStats_Progress(*from.progress_);
  } else {
    progress_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.storage.v1.StreamStats)
}

void StreamStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamStats_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  progress_ = nullptr;
}

StreamStats::~StreamStats() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.storage.v1.StreamStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete progress_;
}

void StreamStats::ArenaDtor(void* object) {
  StreamStats* _this = reinterpret_cast< StreamStats* >(object);
  (void)_this;
}
void StreamStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamStats& StreamStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamStats_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void StreamStats::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.storage.v1.StreamStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && progress_ != nullptr) {
    delete progress_;
  }
  progress_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.cloud.bigquery.storage.v1.StreamStats.Progress progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_progress(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.storage.v1.StreamStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.storage.v1.StreamStats.Progress progress = 2;
  if (this->has_progress()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::progress(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.storage.v1.StreamStats)
  return target;
}

size_t StreamStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.storage.v1.StreamStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.cloud.bigquery.storage.v1.StreamStats.Progress progress = 2;
  if (this->has_progress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *progress_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.storage.v1.StreamStats)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.storage.v1.StreamStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.storage.v1.StreamStats)
    MergeFrom(*source);
  }
}

void StreamStats::MergeFrom(const StreamStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.storage.v1.StreamStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_progress()) {
    _internal_mutable_progress()->::google::cloud::bigquery::storage::v1::StreamStats_Progress::MergeFrom(from._internal_progress());
  }
}

void StreamStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.storage.v1.StreamStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamStats::CopyFrom(const StreamStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.storage.v1.StreamStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamStats::IsInitialized() const {
  return true;
}

void StreamStats::InternalSwap(StreamStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(progress_, other->progress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadRowsResponse::InitAsDefaultInstance() {
  ::google::cloud::bigquery::storage::v1::_ReadRowsResponse_default_instance_.avro_rows_ = const_cast< ::google::cloud::bigquery::storage::v1::AvroRows*>(
      ::google::cloud::bigquery::storage::v1::AvroRows::internal_default_instance());
  ::google::cloud::bigquery::storage::v1::_ReadRowsResponse_default_instance_.arrow_record_batch_ = const_cast< ::google::cloud::bigquery::storage::v1::ArrowRecordBatch*>(
      ::google::cloud::bigquery::storage::v1::ArrowRecordBatch::internal_default_instance());
  ::google::cloud::bigquery::storage::v1::_ReadRowsResponse_default_instance_._instance.get_mutable()->stats_ = const_cast< ::google::cloud::bigquery::storage::v1::StreamStats*>(
      ::google::cloud::bigquery::storage::v1::StreamStats::internal_default_instance());
  ::google::cloud::bigquery::storage::v1::_ReadRowsResponse_default_instance_._instance.get_mutable()->throttle_state_ = const_cast< ::google::cloud::bigquery::storage::v1::ThrottleState*>(
      ::google::cloud::bigquery::storage::v1::ThrottleState::internal_default_instance());
}
class ReadRowsResponse::_Internal {
 public:
  static const ::google::cloud::bigquery::storage::v1::AvroRows& avro_rows(const ReadRowsResponse* msg);
  static const ::google::cloud::bigquery::storage::v1::ArrowRecordBatch& arrow_record_batch(const ReadRowsResponse* msg);
  static const ::google::cloud::bigquery::storage::v1::StreamStats& stats(const ReadRowsResponse* msg);
  static const ::google::cloud::bigquery::storage::v1::ThrottleState& throttle_state(const ReadRowsResponse* msg);
};

const ::google::cloud::bigquery::storage::v1::AvroRows&
ReadRowsResponse::_Internal::avro_rows(const ReadRowsResponse* msg) {
  return *msg->rows_.avro_rows_;
}
const ::google::cloud::bigquery::storage::v1::ArrowRecordBatch&
ReadRowsResponse::_Internal::arrow_record_batch(const ReadRowsResponse* msg) {
  return *msg->rows_.arrow_record_batch_;
}
const ::google::cloud::bigquery::storage::v1::StreamStats&
ReadRowsResponse::_Internal::stats(const ReadRowsResponse* msg) {
  return *msg->stats_;
}
const ::google::cloud::bigquery::storage::v1::ThrottleState&
ReadRowsResponse::_Internal::throttle_state(const ReadRowsResponse* msg) {
  return *msg->throttle_state_;
}
void ReadRowsResponse::set_allocated_avro_rows(::google::cloud::bigquery::storage::v1::AvroRows* avro_rows) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rows();
  if (avro_rows) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(avro_rows)->GetArena();
    if (message_arena != submessage_arena) {
      avro_rows = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avro_rows, submessage_arena);
    }
    set_has_avro_rows();
    rows_.avro_rows_ = avro_rows;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.ReadRowsResponse.avro_rows)
}
void ReadRowsResponse::clear_avro_rows() {
  if (_internal_has_avro_rows()) {
    if (GetArena() == nullptr) {
      delete rows_.avro_rows_;
    }
    clear_has_rows();
  }
}
void ReadRowsResponse::set_allocated_arrow_record_batch(::google::cloud::bigquery::storage::v1::ArrowRecordBatch* arrow_record_batch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rows();
  if (arrow_record_batch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arrow_record_batch)->GetArena();
    if (message_arena != submessage_arena) {
      arrow_record_batch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arrow_record_batch, submessage_arena);
    }
    set_has_arrow_record_batch();
    rows_.arrow_record_batch_ = arrow_record_batch;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.ReadRowsResponse.arrow_record_batch)
}
void ReadRowsResponse::clear_arrow_record_batch() {
  if (_internal_has_arrow_record_batch()) {
    if (GetArena() == nullptr) {
      delete rows_.arrow_record_batch_;
    }
    clear_has_rows();
  }
}
ReadRowsResponse::ReadRowsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.bigquery.storage.v1.ReadRowsResponse)
}
ReadRowsResponse::ReadRowsResponse(const ReadRowsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stats()) {
    stats_ = new ::google::cloud::bigquery::storage::v1::StreamStats(*from.stats_);
  } else {
    stats_ = nullptr;
  }
  if (from._internal_has_throttle_state()) {
    throttle_state_ = new ::google::cloud::bigquery::storage::v1::ThrottleState(*from.throttle_state_);
  } else {
    throttle_state_ = nullptr;
  }
  row_count_ = from.row_count_;
  clear_has_rows();
  switch (from.rows_case()) {
    case kAvroRows: {
      _internal_mutable_avro_rows()->::google::cloud::bigquery::storage::v1::AvroRows::MergeFrom(from._internal_avro_rows());
      break;
    }
    case kArrowRecordBatch: {
      _internal_mutable_arrow_record_batch()->::google::cloud::bigquery::storage::v1::ArrowRecordBatch::MergeFrom(from._internal_arrow_record_batch());
      break;
    }
    case ROWS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.storage.v1.ReadRowsResponse)
}

void ReadRowsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadRowsResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  ::memset(&stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&row_count_) -
      reinterpret_cast<char*>(&stats_)) + sizeof(row_count_));
  clear_has_rows();
}

ReadRowsResponse::~ReadRowsResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.storage.v1.ReadRowsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadRowsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stats_;
  if (this != internal_default_instance()) delete throttle_state_;
  if (has_rows()) {
    clear_rows();
  }
}

void ReadRowsResponse::ArenaDtor(void* object) {
  ReadRowsResponse* _this = reinterpret_cast< ReadRowsResponse* >(object);
  (void)_this;
}
void ReadRowsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadRowsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadRowsResponse& ReadRowsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadRowsResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void ReadRowsResponse::clear_rows() {
// @@protoc_insertion_point(one_of_clear_start:google.cloud.bigquery.storage.v1.ReadRowsResponse)
  switch (rows_case()) {
    case kAvroRows: {
      if (GetArena() == nullptr) {
        delete rows_.avro_rows_;
      }
      break;
    }
    case kArrowRecordBatch: {
      if (GetArena() == nullptr) {
        delete rows_.arrow_record_batch_;
      }
      break;
    }
    case ROWS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ROWS_NOT_SET;
}


void ReadRowsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.storage.v1.ReadRowsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && stats_ != nullptr) {
    delete stats_;
  }
  stats_ = nullptr;
  if (GetArena() == nullptr && throttle_state_ != nullptr) {
    delete throttle_state_;
  }
  throttle_state_ = nullptr;
  row_count_ = PROTOBUF_LONGLONG(0);
  clear_rows();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRowsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.cloud.bigquery.storage.v1.StreamStats stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.cloud.bigquery.storage.v1.AvroRows avro_rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_avro_rows(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.cloud.bigquery.storage.v1.ArrowRecordBatch arrow_record_batch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_arrow_record_batch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.cloud.bigquery.storage.v1.ThrottleState throttle_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_throttle_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 row_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadRowsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.storage.v1.ReadRowsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.storage.v1.StreamStats stats = 2;
  if (this->has_stats()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stats(this), target, stream);
  }

  // .google.cloud.bigquery.storage.v1.AvroRows avro_rows = 3;
  if (_internal_has_avro_rows()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::avro_rows(this), target, stream);
  }

  // .google.cloud.bigquery.storage.v1.ArrowRecordBatch arrow_record_batch = 4;
  if (_internal_has_arrow_record_batch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::arrow_record_batch(this), target, stream);
  }

  // .google.cloud.bigquery.storage.v1.ThrottleState throttle_state = 5;
  if (this->has_throttle_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::throttle_state(this), target, stream);
  }

  // int64 row_count = 6;
  if (this->row_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_row_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.storage.v1.ReadRowsResponse)
  return target;
}

size_t ReadRowsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.storage.v1.ReadRowsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.cloud.bigquery.storage.v1.StreamStats stats = 2;
  if (this->has_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stats_);
  }

  // .google.cloud.bigquery.storage.v1.ThrottleState throttle_state = 5;
  if (this->has_throttle_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *throttle_state_);
  }

  // int64 row_count = 6;
  if (this->row_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_row_count());
  }

  switch (rows_case()) {
    // .google.cloud.bigquery.storage.v1.AvroRows avro_rows = 3;
    case kAvroRows: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rows_.avro_rows_);
      break;
    }
    // .google.cloud.bigquery.storage.v1.ArrowRecordBatch arrow_record_batch = 4;
    case kArrowRecordBatch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rows_.arrow_record_batch_);
      break;
    }
    case ROWS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadRowsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.storage.v1.ReadRowsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadRowsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadRowsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.storage.v1.ReadRowsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.storage.v1.ReadRowsResponse)
    MergeFrom(*source);
  }
}

void ReadRowsResponse::MergeFrom(const ReadRowsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.storage.v1.ReadRowsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stats()) {
    _internal_mutable_stats()->::google::cloud::bigquery::storage::v1::StreamStats::MergeFrom(from._internal_stats());
  }
  if (from.has_throttle_state()) {
    _internal_mutable_throttle_state()->::google::cloud::bigquery::storage::v1::ThrottleState::MergeFrom(from._internal_throttle_state());
  }
  if (from.row_count() != 0) {
    _internal_set_row_count(from._internal_row_count());
  }
  switch (from.rows_case()) {
    case kAvroRows: {
      _internal_mutable_avro_rows()->::google::cloud::bigquery::storage::v1::AvroRows::MergeFrom(from._internal_avro_rows());
      break;
    }
    case kArrowRecordBatch: {
      _internal_mutable_arrow_record_batch()->::google::cloud::bigquery::storage::v1::ArrowRecordBatch::MergeFrom(from._internal_arrow_record_batch());
      break;
    }
    case ROWS_NOT_SET: {
      break;
    }
  }
}

void ReadRowsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.storage.v1.ReadRowsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRowsResponse::CopyFrom(const ReadRowsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.storage.v1.ReadRowsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRowsResponse::IsInitialized() const {
  return true;
}

void ReadRowsResponse::InternalSwap(ReadRowsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadRowsResponse, row_count_)
      + sizeof(ReadRowsResponse::row_count_)
      - PROTOBUF_FIELD_OFFSET(ReadRowsResponse, stats_)>(
          reinterpret_cast<char*>(&stats_),
          reinterpret_cast<char*>(&other->stats_));
  swap(rows_, other->rows_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRowsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SplitReadStreamRequest::InitAsDefaultInstance() {
}
class SplitReadStreamRequest::_Internal {
 public:
};

SplitReadStreamRequest::SplitReadStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.bigquery.storage.v1.SplitReadStreamRequest)
}
SplitReadStreamRequest::SplitReadStreamRequest(const SplitReadStreamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  fraction_ = from.fraction_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.storage.v1.SplitReadStreamRequest)
}

void SplitReadStreamRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SplitReadStreamRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fraction_ = 0;
}

SplitReadStreamRequest::~SplitReadStreamRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.storage.v1.SplitReadStreamRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SplitReadStreamRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SplitReadStreamRequest::ArenaDtor(void* object) {
  SplitReadStreamRequest* _this = reinterpret_cast< SplitReadStreamRequest* >(object);
  (void)_this;
}
void SplitReadStreamRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SplitReadStreamRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SplitReadStreamRequest& SplitReadStreamRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SplitReadStreamRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void SplitReadStreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.storage.v1.SplitReadStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fraction_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SplitReadStreamRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.bigquery.storage.v1.SplitReadStreamRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double fraction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SplitReadStreamRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.storage.v1.SplitReadStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.storage.v1.SplitReadStreamRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // double fraction = 2;
  if (!(this->fraction() <= 0 && this->fraction() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_fraction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.storage.v1.SplitReadStreamRequest)
  return target;
}

size_t SplitReadStreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.storage.v1.SplitReadStreamRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // double fraction = 2;
  if (!(this->fraction() <= 0 && this->fraction() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SplitReadStreamRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.storage.v1.SplitReadStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SplitReadStreamRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SplitReadStreamRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.storage.v1.SplitReadStreamRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.storage.v1.SplitReadStreamRequest)
    MergeFrom(*source);
  }
}

void SplitReadStreamRequest::MergeFrom(const SplitReadStreamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.storage.v1.SplitReadStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (!(from.fraction() <= 0 && from.fraction() >= 0)) {
    _internal_set_fraction(from._internal_fraction());
  }
}

void SplitReadStreamRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.storage.v1.SplitReadStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitReadStreamRequest::CopyFrom(const SplitReadStreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.storage.v1.SplitReadStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitReadStreamRequest::IsInitialized() const {
  return true;
}

void SplitReadStreamRequest::InternalSwap(SplitReadStreamRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(fraction_, other->fraction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SplitReadStreamRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SplitReadStreamResponse::InitAsDefaultInstance() {
  ::google::cloud::bigquery::storage::v1::_SplitReadStreamResponse_default_instance_._instance.get_mutable()->primary_stream_ = const_cast< ::google::cloud::bigquery::storage::v1::ReadStream*>(
      ::google::cloud::bigquery::storage::v1::ReadStream::internal_default_instance());
  ::google::cloud::bigquery::storage::v1::_SplitReadStreamResponse_default_instance_._instance.get_mutable()->remainder_stream_ = const_cast< ::google::cloud::bigquery::storage::v1::ReadStream*>(
      ::google::cloud::bigquery::storage::v1::ReadStream::internal_default_instance());
}
class SplitReadStreamResponse::_Internal {
 public:
  static const ::google::cloud::bigquery::storage::v1::ReadStream& primary_stream(const SplitReadStreamResponse* msg);
  static const ::google::cloud::bigquery::storage::v1::ReadStream& remainder_stream(const SplitReadStreamResponse* msg);
};

const ::google::cloud::bigquery::storage::v1::ReadStream&
SplitReadStreamResponse::_Internal::primary_stream(const SplitReadStreamResponse* msg) {
  return *msg->primary_stream_;
}
const ::google::cloud::bigquery::storage::v1::ReadStream&
SplitReadStreamResponse::_Internal::remainder_stream(const SplitReadStreamResponse* msg) {
  return *msg->remainder_stream_;
}
void SplitReadStreamResponse::clear_primary_stream() {
  if (GetArena() == nullptr && primary_stream_ != nullptr) {
    delete primary_stream_;
  }
  primary_stream_ = nullptr;
}
void SplitReadStreamResponse::clear_remainder_stream() {
  if (GetArena() == nullptr && remainder_stream_ != nullptr) {
    delete remainder_stream_;
  }
  remainder_stream_ = nullptr;
}
SplitReadStreamResponse::SplitReadStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.bigquery.storage.v1.SplitReadStreamResponse)
}
SplitReadStreamResponse::SplitReadStreamResponse(const SplitReadStreamResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_primary_stream()) {
    primary_stream_ = new ::google::cloud::bigquery::storage::v1::ReadStream(*from.primary_stream_);
  } else {
    primary_stream_ = nullptr;
  }
  if (from._internal_has_remainder_stream()) {
    remainder_stream_ = new ::google::cloud::bigquery::storage::v1::ReadStream(*from.remainder_stream_);
  } else {
    remainder_stream_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.storage.v1.SplitReadStreamResponse)
}

void SplitReadStreamResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SplitReadStreamResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  ::memset(&primary_stream_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remainder_stream_) -
      reinterpret_cast<char*>(&primary_stream_)) + sizeof(remainder_stream_));
}

SplitReadStreamResponse::~SplitReadStreamResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.storage.v1.SplitReadStreamResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SplitReadStreamResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete primary_stream_;
  if (this != internal_default_instance()) delete remainder_stream_;
}

void SplitReadStreamResponse::ArenaDtor(void* object) {
  SplitReadStreamResponse* _this = reinterpret_cast< SplitReadStreamResponse* >(object);
  (void)_this;
}
void SplitReadStreamResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SplitReadStreamResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SplitReadStreamResponse& SplitReadStreamResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SplitReadStreamResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void SplitReadStreamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.storage.v1.SplitReadStreamResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && primary_stream_ != nullptr) {
    delete primary_stream_;
  }
  primary_stream_ = nullptr;
  if (GetArena() == nullptr && remainder_stream_ != nullptr) {
    delete remainder_stream_;
  }
  remainder_stream_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SplitReadStreamResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.cloud.bigquery.storage.v1.ReadStream primary_stream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_primary_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.cloud.bigquery.storage.v1.ReadStream remainder_stream = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_remainder_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SplitReadStreamResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.storage.v1.SplitReadStreamResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.storage.v1.ReadStream primary_stream = 1;
  if (this->has_primary_stream()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::primary_stream(this), target, stream);
  }

  // .google.cloud.bigquery.storage.v1.ReadStream remainder_stream = 2;
  if (this->has_remainder_stream()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::remainder_stream(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.storage.v1.SplitReadStreamResponse)
  return target;
}

size_t SplitReadStreamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.storage.v1.SplitReadStreamResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.cloud.bigquery.storage.v1.ReadStream primary_stream = 1;
  if (this->has_primary_stream()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *primary_stream_);
  }

  // .google.cloud.bigquery.storage.v1.ReadStream remainder_stream = 2;
  if (this->has_remainder_stream()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *remainder_stream_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SplitReadStreamResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.storage.v1.SplitReadStreamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SplitReadStreamResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SplitReadStreamResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.storage.v1.SplitReadStreamResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.storage.v1.SplitReadStreamResponse)
    MergeFrom(*source);
  }
}

void SplitReadStreamResponse::MergeFrom(const SplitReadStreamResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.storage.v1.SplitReadStreamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_primary_stream()) {
    _internal_mutable_primary_stream()->::google::cloud::bigquery::storage::v1::ReadStream::MergeFrom(from._internal_primary_stream());
  }
  if (from.has_remainder_stream()) {
    _internal_mutable_remainder_stream()->::google::cloud::bigquery::storage::v1::ReadStream::MergeFrom(from._internal_remainder_stream());
  }
}

void SplitReadStreamResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.storage.v1.SplitReadStreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitReadStreamResponse::CopyFrom(const SplitReadStreamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.storage.v1.SplitReadStreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitReadStreamResponse::IsInitialized() const {
  return true;
}

void SplitReadStreamResponse::InternalSwap(SplitReadStreamResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SplitReadStreamResponse, remainder_stream_)
      + sizeof(SplitReadStreamResponse::remainder_stream_)
      - PROTOBUF_FIELD_OFFSET(SplitReadStreamResponse, primary_stream_)>(
          reinterpret_cast<char*>(&primary_stream_),
          reinterpret_cast<char*>(&other->primary_stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SplitReadStreamResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace storage
}  // namespace bigquery
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest* Arena::CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::bigquery::storage::v1::ReadRowsRequest* Arena::CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::ReadRowsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::bigquery::storage::v1::ReadRowsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::bigquery::storage::v1::ThrottleState* Arena::CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::ThrottleState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::bigquery::storage::v1::ThrottleState >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::bigquery::storage::v1::StreamStats_Progress* Arena::CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::StreamStats_Progress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::bigquery::storage::v1::StreamStats_Progress >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::bigquery::storage::v1::StreamStats* Arena::CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::StreamStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::bigquery::storage::v1::StreamStats >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::bigquery::storage::v1::ReadRowsResponse* Arena::CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::ReadRowsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::bigquery::storage::v1::ReadRowsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest* Arena::CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse* Arena::CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
